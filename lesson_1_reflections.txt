How did viewing a diff between two versions of a file help you see a bug that was introduced?
It is literally impossible to go through the files manually to spot the differences especially if the files under consideration are huge. Diff command actually listed clearly what was added deleted in the new file as compared to the old one. this made the comparison lot easier.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
whenever a long program is being developed it becomes important to keep track of earlier versions of the code as there could have been some changes made which may not be very desirable and it may be necessary to revert to the earlier version for that part of the code. 
when there are multiple people working on a code it is important to understand all the changes that are being made to the code. 
there could be some new learnings which may necessitate starting from an earlier version for some part of the code.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in git, vs having versions having automatically saved, like google docs does?
Pros
1. Depending on the programming style of a person, he/she can decide when to commit
2. its lot more convenient for a human to actually know when its worth actually making a commit which will group the commits into logical buckets that can be used later
3. this is especially useful when collaborating, the other person would only look at the commits that have something substantial in them rather than wasting time on useless commits which could be the case with auto commits
Cons
1. Not helpful for someone who doesnt have the habit of commiting versions frequently. 
2. dont have to worry about choosing the right moment to save but can think only about working on the code. 

Why do you think some version control systems, like git, allow saving multiple files in one commit while others, like google docs, treat each file separately?
If all the codes in a repository are related, there is a possibility that changing onr file may affect the contents of other files as well. at any given point it in time it becomes important to look at the latest versions of all the files instead of going through the manual process of figuring out when a commit was actually made to a related file, also there could be a possibility that a different commit may be conisdered as the actual one. Hence it makes sense to commit all the related codes together

How can you use the commands git log and git diff to view the history of files?
git log command can be used to view the history of commits along with the message provided to each commit. commit id is provided for each commit which can be used to access the file. git diff can be used to compare two commits to understand the differences between two commits, lines added and deleted are clearly listed down.

How might using version control make you more confident to make changes that could break something?
I dont have to think about making changes to my code fearing something would breat as i have copy of the snapshots of the file when everything was working as expected. this gives greater flixibility to experiment with the codes as required

Now that you have your workspace set up, what do you want to try using Git for?
i would like to use git for storing all data science masters curiculum on github. use it actively for all my projects on data science specialization on coursera. i will try to use git as much as possible

